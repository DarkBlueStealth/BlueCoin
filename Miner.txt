[["AAAAAAAAAAAAAABgaWk3wAAAAACIhwFAAAAAAAAA8L8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAAAAAAAAAAEEAAAAAAAAAUQAAAAAAAAABAREREZmZm","Modem",{"NetworkID":"0"}],["AAAAAAAA+D8AAABgaek3wAAAAAAgHuY/AAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAEEAAAAAAAADwPwAAAAAAAPA/Y19iZmZm","Port",{"PortID":"1"}],["AAAAAAAAAAAAAABgaWk4wAAAAAAgHuY/AAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAACEAAAAAAAADwPwAAAAAAAABALGUdZmZm","Microcontroller",{"Code":"--MADE BY BLUELOOPS9 FOR BLUECOIN\n--Made in 2023.\n\n--Have fun mining BlueCoin!\n\n\n--This is for the SHA-256 algorithm.\nlocal mod = 2^32\nlocal modm = mod-1\n\nlocal function memoize(f)\n\tlocal mt = {}\n\tlocal t = setmetatable({}, mt)\n\tfunction mt:__index(k)\n\t\tlocal v = f(k)\n\t\tt[k] = v\n\t\treturn v\n\tend\n\treturn t\nend\n\nlocal function make_bitop_uncached(t, m)\n\tlocal function bitop(a, b)\n\t\tlocal res,p = 0,1\n\t\twhile a ~= 0 and b ~= 0 do\n\t\t\tlocal am, bm = a % m, b % m\n\t\t\tres = res + t[am][bm] * p\n\t\t\ta = (a - am) / m\n\t\t\tb = (b - bm) / m\n\t\t\tp = p*m\n\t\tend\n\t\tres = res + (a + b) * p\n\t\treturn res\n\tend\n\treturn bitop\nend\n\nlocal function make_bitop(t)\n\tlocal op1 = make_bitop_uncached(t,2^1)\n\tlocal op2 = memoize(function(a) return memoize(function(b) return op1(a, b) end) end)\n\treturn make_bitop_uncached(op2, 2 ^ (t.n or 1))\nend\n\nlocal bxor1 = make_bitop({[0] = {[0] = 0,[1] = 1}, [1] = {[0] = 1, [1] = 0}, n = 4})\n\nlocal function bxor(a, b, c, ...)\n\tlocal z = nil\n\tif b then\n\t\ta = a % mod\n\t\tb = b % mod\n\t\tz = bxor1(a, b)\n\t\tif c then z = bxor(z, c, ...) end\n\t\treturn z\n\telseif a then return a % mod\n\telse return 0 end\nend\n\nlocal function band(a, b, c, ...)\n\tlocal z\n\tif b then\n\t\ta = a % mod\n\t\tb = b % mod\n\t\tz = ((a + b) - bxor1(a,b)) / 2\n\t\tif c then z = bit32_band(z, c, ...) end\n\t\treturn z\n\telseif a then return a % mod\n\telse return modm end\nend\n\nlocal function bnot(x) return (-1 - x) % mod end\n\nlocal function rshift1(a, disp)\n\tif disp < 0 then return lshift(a,-disp) end\n\treturn math.floor(a % 2 ^ 32 / 2 ^ disp)\nend\n\nlocal function rshift(x, disp)\n\tif disp > 31 or disp < -31 then return 0 end\n\treturn rshift1(x % mod, disp)\nend\n\nlocal function lshift(a, disp)\n\tif disp < 0 then return rshift(a,-disp) end\n\treturn (a * 2 ^ disp) % 2 ^ 32\nend\n\nlocal function rrotate(x, disp)\n\tx = x % mod\n\tdisp = disp % 32\n\tlocal low = band(x, 2 ^ disp - 1)\n\treturn rshift(x, disp) + lshift(low, 32 - disp)\nend\n\nlocal k = {\n\t0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n\t0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n\t0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n\t0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n\t0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n\t0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n\t0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n\t0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n\t0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n\t0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n\t0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n\t0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n\t0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n\t0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n\t0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n\t0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n}\n\nlocal function str2hexa(s)\n\treturn (string.gsub(s, \".\", function(c) return string.format(\"%02x\", string.byte(c)) end))\nend\n\nlocal function num2s(l, n)\n\tlocal s = \"\"\n\tfor i = 1, n do\n\t\tlocal rem = l % 256\n\t\ts = string.char(rem) .. s\n\t\tl = (l - rem) / 256\n\tend\n\treturn s\nend\n\nlocal function s232num(s, i)\n\tlocal n = 0\n\tfor i = i, i + 3 do n = n*256 + string.byte(s, i) end\n\treturn n\nend\n\nlocal function preproc(msg, len)\n\tlocal extra = 64 - ((len + 9) % 64)\n\tlen = num2s(8 * len, 8)\n\tmsg = msg .. \"\\128\" .. string.rep(\"\\0\", extra) .. len\n\tassert(#msg % 64 == 0)\n\treturn msg\nend\n\nlocal function InitH256(H)\n\tH[1] = 0x6a09e667\n\tH[2] = 0xbb67ae85\n\tH[3] = 0x3c6ef372\n\tH[4] = 0xa54ff53a\n\tH[5] = 0x510e527f\n\tH[6] = 0x9b05688c\n\tH[7] = 0x1f83d9ab\n\tH[8] = 0x5be0cd19\n\treturn H\nend\n\nlocal function DigestBlock(msg, i, H)\n\tlocal w = {}\n\tfor j = 1, 16 do w[j] = s232num(msg, i + (j - 1)*4) end\n\tfor j = 17, 64 do\n\t\tlocal v = w[j - 15]\n\t\tlocal s0 = bxor(rrotate(v, 7), rrotate(v, 18), rshift(v, 3))\n\t\tv = w[j - 2]\n\t\tw[j] = w[j - 16] + s0 + w[j - 7] + bxor(rrotate(v, 17), rrotate(v, 19), rshift(v, 10))\n\tend\n\n\tlocal a, b, c, d, e, f, g, h = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]\n\tfor i = 1, 64 do\n\t\tlocal s0 = bxor(rrotate(a, 2), rrotate(a, 13), rrotate(a, 22))\n\t\tlocal maj = bxor(band(a, b), band(a, c), band(b, c))\n\t\tlocal t2 = s0 + maj\n\t\tlocal s1 = bxor(rrotate(e, 6), rrotate(e, 11), rrotate(e, 25))\n\t\tlocal ch = bxor (band(e, f), band(bnot(e), g))\n\t\tlocal t1 = h + s1 + ch + k[i] + w[i]\n\t\th, g, f, e, d, c, b, a = g, f, e, d + t1, c, b, a, t1 + t2\n\tend\n\n\tH[1] = band(H[1] + a)\n\tH[2] = band(H[2] + b)\n\tH[3] = band(H[3] + c)\n\tH[4] = band(H[4] + d)\n\tH[5] = band(H[5] + e)\n\tH[6] = band(H[6] + f)\n\tH[7] = band(H[7] + g)\n\tH[8] = band(H[8] + h)\nend\n\nlocal function SHA256(msg)\n\tmsg = preproc(msg, #msg)\n\tlocal H = InitH256({})\n\tfor i = 1, #msg, 64 do DigestBlock(msg, i, H) end\n\treturn str2hexa(num2s(H[1], 4) .. num2s(H[2], 4) .. num2s(H[3], 4) .. num2s(H[4], 4)\n\t\t.. num2s(H[5], 4) .. num2s(H[6], 4) .. num2s(H[7], 4) .. num2s(H[8], 4))\nend\n\n\n--WoS additions\nlocal Modem = GetPartFromPort(1, \"Modem\")\nlocal Sign = GetPartFromPort(1, \"Sign\")\nlocal Keyboard = GetPartFromPort(1, \"Keyboard\")\n\n\nHash = \"None\"\nNonce = 0\nUsername = nil\nWait = true\nSHAED = \"\"\nContent2 = \"\"\nRealMethod = false\n\nKeyboard:Connect(\"TextInputted\", function(User)\n\tif Username == nil then\n\t\tUsername = User:sub(1,#User-1)\n\tend\nend)\n\nSign:Configure({SignText=\"Enter your Username to start mining.\"})\nrepeat wait() until Username ~= nil\nSign:Configure({SignText=\"Mining bluecoin...\"})\nBeep(1)\n--This checks if the hash it has is the current one.\ncoroutine.resume(coroutine.create(function()\n\twhile wait(5) do\n\t\tContent = JSONEncode({Method=\"CheckHash\",Hash=Hash})\n\t\t--Yes this has my website, but you can find my location with it because its not on my RPi4 anymore :>\n\t\tlocal Data, Success = Modem:RealPostRequest(\"https://darkbluestealth.pythonanywhere.com\", Content, false, buh, {[\"Content-Type\"]=\"application/json\"})\n\t\tif Data ~= \"405\" then\n\t\t\tBeep(1)\n\t\t\tHash = Data\n\t\t\tNonce = 0\n\t\t\tWait = false\n\t\t\tSign:Configure({SignText=\"New h ash found.\"})\n\t\tend\n\tend\nend))\n--The main algorithm.\nwhile task.wait() do\n\tSHAED = SHA256(Hash..Nonce)\n\tif SHAED:sub(1,3) == \"000\" and not Wait then\n\t\tBeep(1)\n\t\tBeep(2)\n\t\tBeep(0.5)\n\t\tprint(SHAED)\n\t\tWait = true\n\t\tContent2 = JSONEncode({Hash=Hash,Nonce=Nonce,Username=Username,Outcome=SHAED,Method=\"FoundHash\"})\n\t\tlocal Data2, Success = Modem:RealPostRequest(\"https://darkbluestealth.pythonanywhere.com\", Content2, false, buh, {[\"Content-Type\"]=\"application/json\"})\n\t\tif Data2 == \"100\" then\n\t\t\tSign:Configure({SignText=\"Number found! One morsel of bluecoin added.\"})\n\t\tend\n\t\tif Data2 == \"402\" then\n\t\t\tWait = false\n\t\t\tSign:Configure({SignText=\"Invalid?\"})\n\t\tend\n\t\tif Data2 == \"403\" then\n\t\t\tWait = false\n\t\t\tSign:Configure({SignText=\"Invalid hash.\"})\n\t\tend\n\tend\n\tNonce = tostring(math.random(0,99999999))\nend\n\n\n--GiB ME BlUECoIN At blueloops9"}],["AAAAAAAA4L8AAABgaWk5wAAAAADAw9O/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/zI5pZmZm","Polysilicon",{"Frequency":"1","PolysiliconMode":"2"}],["AAAAAAAA4L8AAABgaWk5wAAAAADw8Pi/AAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAA8D8AAAAAAAD4PwAAAAAAAPA/2oVBZmZm","Button",{"TriggerMode":"0","KeyInput":""}],["AAAAAAAAAkAAAABgaWk2wAAAAAAgHuY/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAFEAAAAAAAAAIQAAAAAAAAOA/W11pZmZm","Sign",{"TextFont":"Enum.Font.SciFi","TextColor":"1,1,1","SignText":"Text"}],["AAAAAAAAAsAAAABgaWk2wAAAAAAgHuY/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAFEAAAAAAAAAIQAAAAAAAAOA/Y19iZmZm","Sign",{"TextFont":"Enum.Font.SciFi","TextColor":"1,1,1","SignText":"BlueCoin Miner V1.0"}],["AAAAAAAAAAAAAABgaak0wAAAAABAPNw/AAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAFEAAAAAAAADgPwAAAAAAABZAY19iZmZm","Iron"],["AAAAAAAAAAAAAABgaSk6wAAAAABAPNw/AAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAFEAAAAAAAADgPwAAAAAAABZAY19iZmZm","Iron"],["AAAAAAAAAAAAAABgaWk3wAAAAACIhwtAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAGEAAAAAAAADgPwAAAAAAABRAY19iZmZm","Iron"],["AAAAAAAA+L8AAABgaWk5wAAAAADg4eG/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAADEAAAAAAAADwPwAAAAAAAPA/2oVBZmZm","Wire"],["AAAAAAAAAsAAAABgaek4wAAAAAAgHuY/AAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAADgPwAAAAAAABRAY19iZmZm","Iron"],["AAAAAAAAAkAAAABgaek4wAAAAAAgHuY/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFEAAAAAAAADgPwAAAAAAAABA3NzdZmZm","Keyboard"],["AAAAAAAA8D8AAABgaWk5wAAAAAB4eADAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAA8D8AAAAAAADgPwAAAAAAAABAY19iZmZm","Iron"],["AAAAAAAAAAAAAABgaek2wAAAAAB4eADAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAEEAAAAAAAADgPwAAAAAAABBAY19iZmZm","Iron"],["AAAAAAAAAsAAAABgaWk3wAAAAAB4eADAAAAAAAAAAAAAAAAAAADwPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPA/AAAAAAAAFEAAAAAAAADgPwAAAAAAAOA/Y19iZmZm","Iron"],["AAAAAAAAAkAAAABgaWk3wAAAAAB4eADAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAFEAAAAAAAADgPwAAAAAAAOA/Y19iZmZm","Iron"]]
